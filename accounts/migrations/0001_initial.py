# Generated by Django 3.1.4 on 2021-06-03 11:15

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountModel',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Resource Identifier')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('auth_id', models.CharField(error_messages={'unique': 'An account with that auth_id already exists.'}, help_text='It is the authentication identifier for login, composed by (business_id/username).', max_length=150, unique=True, verbose_name='auth id')),
                ('username', models.CharField(help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(help_text='Required. 254 characters or fewer.', max_length=254, unique=True, verbose_name='email address')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='staff status')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this account has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.A user will get all permissions granted to each of their groups.', related_name='account_set', related_query_name='account', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='account_set', related_query_name='account', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Account',
                'db_table': 'accounts',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='BusinessModel',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Resource Identifier')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('organization_name', models.CharField(max_length=150, validators=[django.core.validators.MinLengthValidator(limit_value=4)])),
                ('organization_slug', models.SlugField(max_length=150, unique=True, validators=[django.core.validators.MinLengthValidator(limit_value=4)])),
                ('master_account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='business', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Business',
                'verbose_name_plural': 'Businesses',
                'db_table': 'business',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='WorkspaceModel',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Resource Identifier')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=50)),
                ('business', models.ForeignKey(help_text='The Business that this workspace belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='workspaces', to='accounts.businessmodel')),
            ],
            options={
                'verbose_name': 'Workspace',
                'db_table': 'workspaces',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Resource Identifier')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('first_name', models.CharField(help_text='Required. 150 characters or fewer', max_length=150, validators=[django.core.validators.MinLengthValidator(limit_value=2)], verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, validators=[django.core.validators.MinLengthValidator(limit_value=2)], verbose_name='last name')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='accounts.businessmodel')),
            ],
            options={
                'verbose_name': 'User',
                'db_table': 'users',
                'ordering': ['-created'],
            },
        ),
        migrations.AddField(
            model_name='accountmodel',
            name='workspaces',
            field=models.ManyToManyField(blank=True, help_text='Workspaces related to this account.', to='accounts.WorkspaceModel', verbose_name='related workspaces'),
        ),
        migrations.AddConstraint(
            model_name='workspacemodel',
            constraint=models.UniqueConstraint(fields=('name', 'business'), name='unique_name'),
        ),
    ]
